/* Copyright Â© 2017 Apple Inc. All rights reserved.
 *
 * Use of this source code is governed by a BSD-3-clause license that can
 * be found in the LICENSE.txt file or at https://opensource.org/licenses/BSD-3-Clause
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GLMClassifier.proto

#ifndef PROTOBUF_GLMClassifier_2eproto__INCLUDED
#define PROTOBUF_GLMClassifier_2eproto__INCLUDED

#include <string>

#include <protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <protobuf/arena.h>
#include <protobuf/arenastring.h>
#include <protobuf/generated_message_util.h>
#include <protobuf/message_lite.h>
#include <protobuf/repeated_field.h>
#include <protobuf/extension_set.h>
#include <protobuf/generated_enum_util.h>
#include "DataStructures.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace CoreML {
namespace Specification {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_GLMClassifier_2eproto();
void protobuf_InitDefaults_GLMClassifier_2eproto();
void protobuf_AssignDesc_GLMClassifier_2eproto();
void protobuf_ShutdownFile_GLMClassifier_2eproto();

class GLMClassifier;
class GLMClassifier_DoubleArray;

enum GLMClassifier_PostEvaluationTransform {
  GLMClassifier_PostEvaluationTransform_Logit = 0,
  GLMClassifier_PostEvaluationTransform_Probit = 1,
  GLMClassifier_PostEvaluationTransform_GLMClassifier_PostEvaluationTransform_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GLMClassifier_PostEvaluationTransform_GLMClassifier_PostEvaluationTransform_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GLMClassifier_PostEvaluationTransform_IsValid(int value);
const GLMClassifier_PostEvaluationTransform GLMClassifier_PostEvaluationTransform_PostEvaluationTransform_MIN = GLMClassifier_PostEvaluationTransform_Logit;
const GLMClassifier_PostEvaluationTransform GLMClassifier_PostEvaluationTransform_PostEvaluationTransform_MAX = GLMClassifier_PostEvaluationTransform_Probit;
const int GLMClassifier_PostEvaluationTransform_PostEvaluationTransform_ARRAYSIZE = GLMClassifier_PostEvaluationTransform_PostEvaluationTransform_MAX + 1;

enum GLMClassifier_ClassEncoding {
  GLMClassifier_ClassEncoding_ReferenceClass = 0,
  GLMClassifier_ClassEncoding_OneVsRest = 1,
  GLMClassifier_ClassEncoding_GLMClassifier_ClassEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GLMClassifier_ClassEncoding_GLMClassifier_ClassEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GLMClassifier_ClassEncoding_IsValid(int value);
const GLMClassifier_ClassEncoding GLMClassifier_ClassEncoding_ClassEncoding_MIN = GLMClassifier_ClassEncoding_ReferenceClass;
const GLMClassifier_ClassEncoding GLMClassifier_ClassEncoding_ClassEncoding_MAX = GLMClassifier_ClassEncoding_OneVsRest;
const int GLMClassifier_ClassEncoding_ClassEncoding_ARRAYSIZE = GLMClassifier_ClassEncoding_ClassEncoding_MAX + 1;

// ===================================================================

class GLMClassifier_DoubleArray : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.GLMClassifier.DoubleArray) */ {
 public:
  GLMClassifier_DoubleArray();
  virtual ~GLMClassifier_DoubleArray();

  GLMClassifier_DoubleArray(const GLMClassifier_DoubleArray& from);

  inline GLMClassifier_DoubleArray& operator=(const GLMClassifier_DoubleArray& from) {
    CopyFrom(from);
    return *this;
  }

  static const GLMClassifier_DoubleArray& default_instance();

  static const GLMClassifier_DoubleArray* internal_default_instance();

  void Swap(GLMClassifier_DoubleArray* other);

  // implements Message ----------------------------------------------

  inline GLMClassifier_DoubleArray* New() const { return New(NULL); }

  GLMClassifier_DoubleArray* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GLMClassifier_DoubleArray& from);
  void MergeFrom(const GLMClassifier_DoubleArray& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GLMClassifier_DoubleArray* other);
  void UnsafeMergeFrom(const GLMClassifier_DoubleArray& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double value = 1;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::google::protobuf::RepeatedField< double >&
      value() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:CoreML.Specification.GLMClassifier.DoubleArray)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::RepeatedField< double > value_;
  mutable int _value_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_GLMClassifier_2eproto_impl();
  friend void  protobuf_AddDesc_GLMClassifier_2eproto_impl();
  friend void protobuf_AssignDesc_GLMClassifier_2eproto();
  friend void protobuf_ShutdownFile_GLMClassifier_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GLMClassifier_DoubleArray> GLMClassifier_DoubleArray_default_instance_;

// -------------------------------------------------------------------

class GLMClassifier : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.GLMClassifier) */ {
 public:
  GLMClassifier();
  virtual ~GLMClassifier();

  GLMClassifier(const GLMClassifier& from);

  inline GLMClassifier& operator=(const GLMClassifier& from) {
    CopyFrom(from);
    return *this;
  }

  static const GLMClassifier& default_instance();

  enum ClassLabelsCase {
    kStringClassLabels = 100,
    kInt64ClassLabels = 101,
    CLASSLABELS_NOT_SET = 0,
  };

  static const GLMClassifier* internal_default_instance();

  void Swap(GLMClassifier* other);

  // implements Message ----------------------------------------------

  inline GLMClassifier* New() const { return New(NULL); }

  GLMClassifier* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GLMClassifier& from);
  void MergeFrom(const GLMClassifier& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GLMClassifier* other);
  void UnsafeMergeFrom(const GLMClassifier& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef GLMClassifier_DoubleArray DoubleArray;

  typedef GLMClassifier_PostEvaluationTransform PostEvaluationTransform;
  static const PostEvaluationTransform Logit =
    GLMClassifier_PostEvaluationTransform_Logit;
  static const PostEvaluationTransform Probit =
    GLMClassifier_PostEvaluationTransform_Probit;
  static inline bool PostEvaluationTransform_IsValid(int value) {
    return GLMClassifier_PostEvaluationTransform_IsValid(value);
  }
  static const PostEvaluationTransform PostEvaluationTransform_MIN =
    GLMClassifier_PostEvaluationTransform_PostEvaluationTransform_MIN;
  static const PostEvaluationTransform PostEvaluationTransform_MAX =
    GLMClassifier_PostEvaluationTransform_PostEvaluationTransform_MAX;
  static const int PostEvaluationTransform_ARRAYSIZE =
    GLMClassifier_PostEvaluationTransform_PostEvaluationTransform_ARRAYSIZE;

  typedef GLMClassifier_ClassEncoding ClassEncoding;
  static const ClassEncoding ReferenceClass =
    GLMClassifier_ClassEncoding_ReferenceClass;
  static const ClassEncoding OneVsRest =
    GLMClassifier_ClassEncoding_OneVsRest;
  static inline bool ClassEncoding_IsValid(int value) {
    return GLMClassifier_ClassEncoding_IsValid(value);
  }
  static const ClassEncoding ClassEncoding_MIN =
    GLMClassifier_ClassEncoding_ClassEncoding_MIN;
  static const ClassEncoding ClassEncoding_MAX =
    GLMClassifier_ClassEncoding_ClassEncoding_MAX;
  static const int ClassEncoding_ARRAYSIZE =
    GLMClassifier_ClassEncoding_ClassEncoding_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .CoreML.Specification.GLMClassifier.DoubleArray weights = 1;
  int weights_size() const;
  void clear_weights();
  static const int kWeightsFieldNumber = 1;
  const ::CoreML::Specification::GLMClassifier_DoubleArray& weights(int index) const;
  ::CoreML::Specification::GLMClassifier_DoubleArray* mutable_weights(int index);
  ::CoreML::Specification::GLMClassifier_DoubleArray* add_weights();
  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::GLMClassifier_DoubleArray >*
      mutable_weights();
  const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::GLMClassifier_DoubleArray >&
      weights() const;

  // repeated double offset = 2;
  int offset_size() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  double offset(int index) const;
  void set_offset(int index, double value);
  void add_offset(double value);
  const ::google::protobuf::RepeatedField< double >&
      offset() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_offset();

  // optional .CoreML.Specification.GLMClassifier.PostEvaluationTransform postEvaluationTransform = 3;
  void clear_postevaluationtransform();
  static const int kPostEvaluationTransformFieldNumber = 3;
  ::CoreML::Specification::GLMClassifier_PostEvaluationTransform postevaluationtransform() const;
  void set_postevaluationtransform(::CoreML::Specification::GLMClassifier_PostEvaluationTransform value);

  // optional .CoreML.Specification.GLMClassifier.ClassEncoding classEncoding = 4;
  void clear_classencoding();
  static const int kClassEncodingFieldNumber = 4;
  ::CoreML::Specification::GLMClassifier_ClassEncoding classencoding() const;
  void set_classencoding(::CoreML::Specification::GLMClassifier_ClassEncoding value);

  // optional .CoreML.Specification.StringVector stringClassLabels = 100;
  bool has_stringclasslabels() const;
  void clear_stringclasslabels();
  static const int kStringClassLabelsFieldNumber = 100;
  const ::CoreML::Specification::StringVector& stringclasslabels() const;
  ::CoreML::Specification::StringVector* mutable_stringclasslabels();
  ::CoreML::Specification::StringVector* release_stringclasslabels();
  void set_allocated_stringclasslabels(::CoreML::Specification::StringVector* stringclasslabels);

  // optional .CoreML.Specification.Int64Vector int64ClassLabels = 101;
  bool has_int64classlabels() const;
  void clear_int64classlabels();
  static const int kInt64ClassLabelsFieldNumber = 101;
  const ::CoreML::Specification::Int64Vector& int64classlabels() const;
  ::CoreML::Specification::Int64Vector* mutable_int64classlabels();
  ::CoreML::Specification::Int64Vector* release_int64classlabels();
  void set_allocated_int64classlabels(::CoreML::Specification::Int64Vector* int64classlabels);

  ClassLabelsCase ClassLabels_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.GLMClassifier)
 private:
  inline void set_has_stringclasslabels();
  inline void set_has_int64classlabels();

  inline bool has_ClassLabels() const;
  void clear_ClassLabels();
  inline void clear_has_ClassLabels();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::GLMClassifier_DoubleArray > weights_;
  ::google::protobuf::RepeatedField< double > offset_;
  mutable int _offset_cached_byte_size_;
  int postevaluationtransform_;
  int classencoding_;
  union ClassLabelsUnion {
    ClassLabelsUnion() {}
    ::CoreML::Specification::StringVector* stringclasslabels_;
    ::CoreML::Specification::Int64Vector* int64classlabels_;
  } ClassLabels_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_GLMClassifier_2eproto_impl();
  friend void  protobuf_AddDesc_GLMClassifier_2eproto_impl();
  friend void protobuf_AssignDesc_GLMClassifier_2eproto();
  friend void protobuf_ShutdownFile_GLMClassifier_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GLMClassifier> GLMClassifier_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GLMClassifier_DoubleArray

// repeated double value = 1;
inline int GLMClassifier_DoubleArray::value_size() const {
  return value_.size();
}
inline void GLMClassifier_DoubleArray::clear_value() {
  value_.Clear();
}
inline double GLMClassifier_DoubleArray::value(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.GLMClassifier.DoubleArray.value)
  return value_.Get(index);
}
inline void GLMClassifier_DoubleArray::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.GLMClassifier.DoubleArray.value)
}
inline void GLMClassifier_DoubleArray::add_value(double value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.GLMClassifier.DoubleArray.value)
}
inline const ::google::protobuf::RepeatedField< double >&
GLMClassifier_DoubleArray::value() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.GLMClassifier.DoubleArray.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< double >*
GLMClassifier_DoubleArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.GLMClassifier.DoubleArray.value)
  return &value_;
}

inline const GLMClassifier_DoubleArray* GLMClassifier_DoubleArray::internal_default_instance() {
  return &GLMClassifier_DoubleArray_default_instance_.get();
}
// -------------------------------------------------------------------

// GLMClassifier

// repeated .CoreML.Specification.GLMClassifier.DoubleArray weights = 1;
inline int GLMClassifier::weights_size() const {
  return weights_.size();
}
inline void GLMClassifier::clear_weights() {
  weights_.Clear();
}
inline const ::CoreML::Specification::GLMClassifier_DoubleArray& GLMClassifier::weights(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.GLMClassifier.weights)
  return weights_.Get(index);
}
inline ::CoreML::Specification::GLMClassifier_DoubleArray* GLMClassifier::mutable_weights(int index) {
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.GLMClassifier.weights)
  return weights_.Mutable(index);
}
inline ::CoreML::Specification::GLMClassifier_DoubleArray* GLMClassifier::add_weights() {
  // @@protoc_insertion_point(field_add:CoreML.Specification.GLMClassifier.weights)
  return weights_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::GLMClassifier_DoubleArray >*
GLMClassifier::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.GLMClassifier.weights)
  return &weights_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CoreML::Specification::GLMClassifier_DoubleArray >&
GLMClassifier::weights() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.GLMClassifier.weights)
  return weights_;
}

// repeated double offset = 2;
inline int GLMClassifier::offset_size() const {
  return offset_.size();
}
inline void GLMClassifier::clear_offset() {
  offset_.Clear();
}
inline double GLMClassifier::offset(int index) const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.GLMClassifier.offset)
  return offset_.Get(index);
}
inline void GLMClassifier::set_offset(int index, double value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.GLMClassifier.offset)
}
inline void GLMClassifier::add_offset(double value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:CoreML.Specification.GLMClassifier.offset)
}
inline const ::google::protobuf::RepeatedField< double >&
GLMClassifier::offset() const {
  // @@protoc_insertion_point(field_list:CoreML.Specification.GLMClassifier.offset)
  return offset_;
}
inline ::google::protobuf::RepeatedField< double >*
GLMClassifier::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:CoreML.Specification.GLMClassifier.offset)
  return &offset_;
}

// optional .CoreML.Specification.GLMClassifier.PostEvaluationTransform postEvaluationTransform = 3;
inline void GLMClassifier::clear_postevaluationtransform() {
  postevaluationtransform_ = 0;
}
inline ::CoreML::Specification::GLMClassifier_PostEvaluationTransform GLMClassifier::postevaluationtransform() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.GLMClassifier.postEvaluationTransform)
  return static_cast< ::CoreML::Specification::GLMClassifier_PostEvaluationTransform >(postevaluationtransform_);
}
inline void GLMClassifier::set_postevaluationtransform(::CoreML::Specification::GLMClassifier_PostEvaluationTransform value) {

  postevaluationtransform_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.GLMClassifier.postEvaluationTransform)
}

// optional .CoreML.Specification.GLMClassifier.ClassEncoding classEncoding = 4;
inline void GLMClassifier::clear_classencoding() {
  classencoding_ = 0;
}
inline ::CoreML::Specification::GLMClassifier_ClassEncoding GLMClassifier::classencoding() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.GLMClassifier.classEncoding)
  return static_cast< ::CoreML::Specification::GLMClassifier_ClassEncoding >(classencoding_);
}
inline void GLMClassifier::set_classencoding(::CoreML::Specification::GLMClassifier_ClassEncoding value) {

  classencoding_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.GLMClassifier.classEncoding)
}

// optional .CoreML.Specification.StringVector stringClassLabels = 100;
inline bool GLMClassifier::has_stringclasslabels() const {
  return ClassLabels_case() == kStringClassLabels;
}
inline void GLMClassifier::set_has_stringclasslabels() {
  _oneof_case_[0] = kStringClassLabels;
}
inline void GLMClassifier::clear_stringclasslabels() {
  if (has_stringclasslabels()) {
    delete ClassLabels_.stringclasslabels_;
    clear_has_ClassLabels();
  }
}
inline  const ::CoreML::Specification::StringVector& GLMClassifier::stringclasslabels() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.GLMClassifier.stringClassLabels)
  return has_stringclasslabels()
      ? *ClassLabels_.stringclasslabels_
      : ::CoreML::Specification::StringVector::default_instance();
}
inline ::CoreML::Specification::StringVector* GLMClassifier::mutable_stringclasslabels() {
  if (!has_stringclasslabels()) {
    clear_ClassLabels();
    set_has_stringclasslabels();
    ClassLabels_.stringclasslabels_ = new ::CoreML::Specification::StringVector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.GLMClassifier.stringClassLabels)
  return ClassLabels_.stringclasslabels_;
}
inline ::CoreML::Specification::StringVector* GLMClassifier::release_stringclasslabels() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.GLMClassifier.stringClassLabels)
  if (has_stringclasslabels()) {
    clear_has_ClassLabels();
    ::CoreML::Specification::StringVector* temp = ClassLabels_.stringclasslabels_;
    ClassLabels_.stringclasslabels_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GLMClassifier::set_allocated_stringclasslabels(::CoreML::Specification::StringVector* stringclasslabels) {
  clear_ClassLabels();
  if (stringclasslabels) {
    set_has_stringclasslabels();
    ClassLabels_.stringclasslabels_ = stringclasslabels;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.GLMClassifier.stringClassLabels)
}

// optional .CoreML.Specification.Int64Vector int64ClassLabels = 101;
inline bool GLMClassifier::has_int64classlabels() const {
  return ClassLabels_case() == kInt64ClassLabels;
}
inline void GLMClassifier::set_has_int64classlabels() {
  _oneof_case_[0] = kInt64ClassLabels;
}
inline void GLMClassifier::clear_int64classlabels() {
  if (has_int64classlabels()) {
    delete ClassLabels_.int64classlabels_;
    clear_has_ClassLabels();
  }
}
inline  const ::CoreML::Specification::Int64Vector& GLMClassifier::int64classlabels() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.GLMClassifier.int64ClassLabels)
  return has_int64classlabels()
      ? *ClassLabels_.int64classlabels_
      : ::CoreML::Specification::Int64Vector::default_instance();
}
inline ::CoreML::Specification::Int64Vector* GLMClassifier::mutable_int64classlabels() {
  if (!has_int64classlabels()) {
    clear_ClassLabels();
    set_has_int64classlabels();
    ClassLabels_.int64classlabels_ = new ::CoreML::Specification::Int64Vector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.GLMClassifier.int64ClassLabels)
  return ClassLabels_.int64classlabels_;
}
inline ::CoreML::Specification::Int64Vector* GLMClassifier::release_int64classlabels() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.GLMClassifier.int64ClassLabels)
  if (has_int64classlabels()) {
    clear_has_ClassLabels();
    ::CoreML::Specification::Int64Vector* temp = ClassLabels_.int64classlabels_;
    ClassLabels_.int64classlabels_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GLMClassifier::set_allocated_int64classlabels(::CoreML::Specification::Int64Vector* int64classlabels) {
  clear_ClassLabels();
  if (int64classlabels) {
    set_has_int64classlabels();
    ClassLabels_.int64classlabels_ = int64classlabels;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.GLMClassifier.int64ClassLabels)
}

inline bool GLMClassifier::has_ClassLabels() const {
  return ClassLabels_case() != CLASSLABELS_NOT_SET;
}
inline void GLMClassifier::clear_has_ClassLabels() {
  _oneof_case_[0] = CLASSLABELS_NOT_SET;
}
inline GLMClassifier::ClassLabelsCase GLMClassifier::ClassLabels_case() const {
  return GLMClassifier::ClassLabelsCase(_oneof_case_[0]);
}
inline const GLMClassifier* GLMClassifier::internal_default_instance() {
  return &GLMClassifier_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CoreML::Specification::GLMClassifier_PostEvaluationTransform> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::CoreML::Specification::GLMClassifier_ClassEncoding> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GLMClassifier_2eproto__INCLUDED
