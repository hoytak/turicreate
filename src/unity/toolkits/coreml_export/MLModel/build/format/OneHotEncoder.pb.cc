// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OneHotEncoder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OneHotEncoder.pb.h"

#include <algorithm>

#include <protobuf/stubs/common.h>
#include <protobuf/stubs/port.h>
#include <protobuf/stubs/once.h>
#include <protobuf/io/coded_stream.h>
#include <protobuf/wire_format_lite_inl.h>
#include <protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace CoreML {
namespace Specification {

void protobuf_ShutdownFile_OneHotEncoder_2eproto() {
  OneHotEncoder_default_instance_.Shutdown();
}

void protobuf_InitDefaults_OneHotEncoder_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CoreML::Specification::protobuf_InitDefaults_DataStructures_2eproto();
  OneHotEncoder_default_instance_.DefaultConstruct();
  OneHotEncoder_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_OneHotEncoder_2eproto_once_);
void protobuf_InitDefaults_OneHotEncoder_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_OneHotEncoder_2eproto_once_,
                 &protobuf_InitDefaults_OneHotEncoder_2eproto_impl);
}
void protobuf_AddDesc_OneHotEncoder_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_OneHotEncoder_2eproto();
  ::CoreML::Specification::protobuf_AddDesc_DataStructures_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OneHotEncoder_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_OneHotEncoder_2eproto_once_);
void protobuf_AddDesc_OneHotEncoder_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_OneHotEncoder_2eproto_once_,
                 &protobuf_AddDesc_OneHotEncoder_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OneHotEncoder_2eproto {
  StaticDescriptorInitializer_OneHotEncoder_2eproto() {
    protobuf_AddDesc_OneHotEncoder_2eproto();
  }
} static_descriptor_initializer_OneHotEncoder_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

bool OneHotEncoder_HandleUnknown_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OneHotEncoder_HandleUnknown OneHotEncoder::ErrorOnUnknown;
const OneHotEncoder_HandleUnknown OneHotEncoder::IgnoreUnknown;
const OneHotEncoder_HandleUnknown OneHotEncoder::HandleUnknown_MIN;
const OneHotEncoder_HandleUnknown OneHotEncoder::HandleUnknown_MAX;
const int OneHotEncoder::HandleUnknown_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneHotEncoder::kStringCategoriesFieldNumber;
const int OneHotEncoder::kInt64CategoriesFieldNumber;
const int OneHotEncoder::kOutputSparseFieldNumber;
const int OneHotEncoder::kHandleUnknownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneHotEncoder::OneHotEncoder()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_OneHotEncoder_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.OneHotEncoder)
}

void OneHotEncoder::InitAsDefaultInstance() {
}

OneHotEncoder::OneHotEncoder(const OneHotEncoder& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.OneHotEncoder)
}

void OneHotEncoder::SharedCtor() {
  ::memset(&outputsparse_, 0, reinterpret_cast<char*>(&handleunknown_) -
    reinterpret_cast<char*>(&outputsparse_) + sizeof(handleunknown_));
  clear_has_CategoryType();
  _cached_size_ = 0;
}

OneHotEncoder::~OneHotEncoder() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.OneHotEncoder)
  SharedDtor();
}

void OneHotEncoder::SharedDtor() {
  if (has_CategoryType()) {
    clear_CategoryType();
  }
}

void OneHotEncoder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OneHotEncoder& OneHotEncoder::default_instance() {
  protobuf_InitDefaults_OneHotEncoder_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OneHotEncoder> OneHotEncoder_default_instance_;

OneHotEncoder* OneHotEncoder::New(::google::protobuf::Arena* arena) const {
  OneHotEncoder* n = new OneHotEncoder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneHotEncoder::clear_CategoryType() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.OneHotEncoder)
  switch (CategoryType_case()) {
    case kStringCategories: {
      delete CategoryType_.stringcategories_;
      break;
    }
    case kInt64Categories: {
      delete CategoryType_.int64categories_;
      break;
    }
    case CATEGORYTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CATEGORYTYPE_NOT_SET;
}


void OneHotEncoder::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.OneHotEncoder)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OneHotEncoder, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OneHotEncoder*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(outputsparse_, handleunknown_);

#undef ZR_HELPER_
#undef ZR_

  clear_CategoryType();
}

bool OneHotEncoder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.OneHotEncoder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CoreML.Specification.StringVector stringCategories = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringcategories()));
        } else {
          goto handle_unusual;
        }
        goto after_int64categories;
        break;
      }

      // optional .CoreML.Specification.Int64Vector int64Categories = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int64categories()));
        } else {
          goto handle_unusual;
        }
       after_int64categories:
        if (input->ExpectTag(80)) goto parse_outputSparse;
        break;
      }

      // optional bool outputSparse = 10;
      case 10: {
        if (tag == 80) {
         parse_outputSparse:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &outputsparse_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_handleUnknown;
        break;
      }

      // optional .CoreML.Specification.OneHotEncoder.HandleUnknown handleUnknown = 11;
      case 11: {
        if (tag == 88) {
         parse_handleUnknown:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_handleunknown(static_cast< ::CoreML::Specification::OneHotEncoder_HandleUnknown >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.OneHotEncoder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.OneHotEncoder)
  return false;
#undef DO_
}

void OneHotEncoder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.OneHotEncoder)
  // optional .CoreML.Specification.StringVector stringCategories = 1;
  if (has_stringcategories()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *CategoryType_.stringcategories_, output);
  }

  // optional .CoreML.Specification.Int64Vector int64Categories = 2;
  if (has_int64categories()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *CategoryType_.int64categories_, output);
  }

  // optional bool outputSparse = 10;
  if (this->outputsparse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->outputsparse(), output);
  }

  // optional .CoreML.Specification.OneHotEncoder.HandleUnknown handleUnknown = 11;
  if (this->handleunknown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->handleunknown(), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.OneHotEncoder)
}

size_t OneHotEncoder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.OneHotEncoder)
  size_t total_size = 0;

  // optional bool outputSparse = 10;
  if (this->outputsparse() != 0) {
    total_size += 1 + 1;
  }

  // optional .CoreML.Specification.OneHotEncoder.HandleUnknown handleUnknown = 11;
  if (this->handleunknown() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->handleunknown());
  }

  switch (CategoryType_case()) {
    // optional .CoreML.Specification.StringVector stringCategories = 1;
    case kStringCategories: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *CategoryType_.stringcategories_);
      break;
    }
    // optional .CoreML.Specification.Int64Vector int64Categories = 2;
    case kInt64Categories: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *CategoryType_.int64categories_);
      break;
    }
    case CATEGORYTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneHotEncoder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OneHotEncoder*>(&from));
}

void OneHotEncoder::MergeFrom(const OneHotEncoder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.OneHotEncoder)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OneHotEncoder::UnsafeMergeFrom(const OneHotEncoder& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.CategoryType_case()) {
    case kStringCategories: {
      mutable_stringcategories()->::CoreML::Specification::StringVector::MergeFrom(from.stringcategories());
      break;
    }
    case kInt64Categories: {
      mutable_int64categories()->::CoreML::Specification::Int64Vector::MergeFrom(from.int64categories());
      break;
    }
    case CATEGORYTYPE_NOT_SET: {
      break;
    }
  }
  if (from.outputsparse() != 0) {
    set_outputsparse(from.outputsparse());
  }
  if (from.handleunknown() != 0) {
    set_handleunknown(from.handleunknown());
  }
}

void OneHotEncoder::CopyFrom(const OneHotEncoder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.OneHotEncoder)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OneHotEncoder::IsInitialized() const {

  return true;
}

void OneHotEncoder::Swap(OneHotEncoder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneHotEncoder::InternalSwap(OneHotEncoder* other) {
  std::swap(outputsparse_, other->outputsparse_);
  std::swap(handleunknown_, other->handleunknown_);
  std::swap(CategoryType_, other->CategoryType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OneHotEncoder::GetTypeName() const {
  return "CoreML.Specification.OneHotEncoder";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneHotEncoder

// optional .CoreML.Specification.StringVector stringCategories = 1;
bool OneHotEncoder::has_stringcategories() const {
  return CategoryType_case() == kStringCategories;
}
void OneHotEncoder::set_has_stringcategories() {
  _oneof_case_[0] = kStringCategories;
}
void OneHotEncoder::clear_stringcategories() {
  if (has_stringcategories()) {
    delete CategoryType_.stringcategories_;
    clear_has_CategoryType();
  }
}
 const ::CoreML::Specification::StringVector& OneHotEncoder::stringcategories() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.OneHotEncoder.stringCategories)
  return has_stringcategories()
      ? *CategoryType_.stringcategories_
      : ::CoreML::Specification::StringVector::default_instance();
}
::CoreML::Specification::StringVector* OneHotEncoder::mutable_stringcategories() {
  if (!has_stringcategories()) {
    clear_CategoryType();
    set_has_stringcategories();
    CategoryType_.stringcategories_ = new ::CoreML::Specification::StringVector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.OneHotEncoder.stringCategories)
  return CategoryType_.stringcategories_;
}
::CoreML::Specification::StringVector* OneHotEncoder::release_stringcategories() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.OneHotEncoder.stringCategories)
  if (has_stringcategories()) {
    clear_has_CategoryType();
    ::CoreML::Specification::StringVector* temp = CategoryType_.stringcategories_;
    CategoryType_.stringcategories_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OneHotEncoder::set_allocated_stringcategories(::CoreML::Specification::StringVector* stringcategories) {
  clear_CategoryType();
  if (stringcategories) {
    set_has_stringcategories();
    CategoryType_.stringcategories_ = stringcategories;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.OneHotEncoder.stringCategories)
}

// optional .CoreML.Specification.Int64Vector int64Categories = 2;
bool OneHotEncoder::has_int64categories() const {
  return CategoryType_case() == kInt64Categories;
}
void OneHotEncoder::set_has_int64categories() {
  _oneof_case_[0] = kInt64Categories;
}
void OneHotEncoder::clear_int64categories() {
  if (has_int64categories()) {
    delete CategoryType_.int64categories_;
    clear_has_CategoryType();
  }
}
 const ::CoreML::Specification::Int64Vector& OneHotEncoder::int64categories() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.OneHotEncoder.int64Categories)
  return has_int64categories()
      ? *CategoryType_.int64categories_
      : ::CoreML::Specification::Int64Vector::default_instance();
}
::CoreML::Specification::Int64Vector* OneHotEncoder::mutable_int64categories() {
  if (!has_int64categories()) {
    clear_CategoryType();
    set_has_int64categories();
    CategoryType_.int64categories_ = new ::CoreML::Specification::Int64Vector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.OneHotEncoder.int64Categories)
  return CategoryType_.int64categories_;
}
::CoreML::Specification::Int64Vector* OneHotEncoder::release_int64categories() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.OneHotEncoder.int64Categories)
  if (has_int64categories()) {
    clear_has_CategoryType();
    ::CoreML::Specification::Int64Vector* temp = CategoryType_.int64categories_;
    CategoryType_.int64categories_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OneHotEncoder::set_allocated_int64categories(::CoreML::Specification::Int64Vector* int64categories) {
  clear_CategoryType();
  if (int64categories) {
    set_has_int64categories();
    CategoryType_.int64categories_ = int64categories;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.OneHotEncoder.int64Categories)
}

// optional bool outputSparse = 10;
void OneHotEncoder::clear_outputsparse() {
  outputsparse_ = false;
}
bool OneHotEncoder::outputsparse() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.OneHotEncoder.outputSparse)
  return outputsparse_;
}
void OneHotEncoder::set_outputsparse(bool value) {

  outputsparse_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.OneHotEncoder.outputSparse)
}

// optional .CoreML.Specification.OneHotEncoder.HandleUnknown handleUnknown = 11;
void OneHotEncoder::clear_handleunknown() {
  handleunknown_ = 0;
}
::CoreML::Specification::OneHotEncoder_HandleUnknown OneHotEncoder::handleunknown() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.OneHotEncoder.handleUnknown)
  return static_cast< ::CoreML::Specification::OneHotEncoder_HandleUnknown >(handleunknown_);
}
void OneHotEncoder::set_handleunknown(::CoreML::Specification::OneHotEncoder_HandleUnknown value) {

  handleunknown_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.OneHotEncoder.handleUnknown)
}

bool OneHotEncoder::has_CategoryType() const {
  return CategoryType_case() != CATEGORYTYPE_NOT_SET;
}
void OneHotEncoder::clear_has_CategoryType() {
  _oneof_case_[0] = CATEGORYTYPE_NOT_SET;
}
OneHotEncoder::CategoryTypeCase OneHotEncoder::CategoryType_case() const {
  return OneHotEncoder::CategoryTypeCase(_oneof_case_[0]);
}
inline const OneHotEncoder* OneHotEncoder::internal_default_instance() {
  return &OneHotEncoder_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)
