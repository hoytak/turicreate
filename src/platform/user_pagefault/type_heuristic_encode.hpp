/* Copyright Â© 2017 Apple Inc. All rights reserved.
 *
 * Use of this source code is governed by a BSD-3-clause license that can
 * be found in the LICENSE.txt file or at https://opensource.org/licenses/BSD-3-Clause
 */
#ifndef TURI_USER_PAGEFAULT_TYPE_HEURISTIC_ENCODE_HPP
#define TURI_USER_PAGEFAULT_TYPE_HEURISTIC_ENCODE_HPP

namespace turi {
namespace type_heuristic_encode {

/**
 * \internal
 * \ingroup pagefault
 * Attempts to compress a sequence of bytes from start to start + length
 * storing the compressed result in output.
 *
 * This is a "type_heuristic_encode" in that it aggressively attempts to
 * reinterpret the data as integer or floating point values, etc. attempts to
 * guess a "column shape" and reencode accordingly.
 *
 * The caller must remember the original length of the input since this is
 * required by the decompressor and is not stored by the compressor.
 * length must be a multiple of 8 bytes.
 *
 * *output must be a pointer to a memory buffer that can store at least
 * output_length bytes. This function may reallocate the buffer even
 * on a failure.
 *
 * There is no guarantee that output_length is shorter than the input_length.
 */
void compress(char* start, size_t length,
              char** output, size_t& output_length);

/**
 * \internal
 * \ingroup pagefault
 * Decompresses a compressed sequence generated by compress.
 * output must point to enough memory to store the decompressed result.
 * It is up to the caller to remember how long was the original length.
 */
void decompress(char* start, size_t length, char* output);

} // type_heuristic_encode
} // turicreate

#endif
